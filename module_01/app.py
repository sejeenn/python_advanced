import datetime
import os
import re
from flask import Flask

app = Flask(__name__)

# корень сайта
@app.route('/')
def main_page():
    now = datetime.datetime.now().utcnow()
    return f'<h1>Главная страница сайта. Время по UTC: {now}.</h1>'


# Далее следуют задания из домашнего задания модуля 1

# Задача1
# Создайте страницу с текстом «Привет, мир!».
@app.route('/hello_world')
def hello():
    return '<h1>Hello World!</h1'


# Задача2
# Создайте страницу, возвращающую список машин через запятую: 
# Chevrolet, Renault, Ford, Lada. 
# Чтобы каждый раз не пересоздавать список машин при обращении к 
# адресу /cars, следует вынести его в глобальную область видимости.
# Так можно добавлять новые машины и отправлять актуальные данные. 
# Что оценивается 
# Список машин не пересоздаётся при открытии страницы. 

cars = ['Chevlotet', 'Renault', 'Ford', 'Lada']

@app.route('/cars')
def cars_list():

    cars_str = ', '.join(cars)    
    return cars_str


# Задача 3. /cats 
# Создайте страницу с названием случайной породы кошек из следующего
# списка: корниш-рекс, русская голубая, шотландская вислоухая,
# мейн-кун, манчкин. 
# Чтобы каждый раз не пересоздавать список пород при обращении к 
# адресу /cats, следует вынести его в глобальную область видимости. 
# Что оценивается 
# Список пород не пересоздаётся при открытии страницы. При обновлении
# страницы каждый раз выводится случайная порода. 

import random
cats = ['корниш-рекс', 'русская голубая', 'шотландская вислоухая','мейн-кун', 'манчкин']

@app.route('/cats')
def cats_random():
    return random.choice(cats)


# Задача 4. /get_time/now 
# Создайте страницу с текстом «Точное время: {current_time}», 
# где current_time — точное текущее время. 
# При форматировании строк используются переменные, а не выражения.
# При обновлении страницы время также обновляется.

@app.route('/get_time/now')
def get_time_now():
    time_format = "%H:%M"
    current_time = datetime.datetime.now().strftime(time_format)
    return f'Точное время: {current_time}'


# Задача 5. /get_time/future 
# Создайте страницу с текстом «Точное время через час будет 
# {current_time_after_hour}», где current_time_after_hour —
# точное время через один час. 
 
@app.route('/get_time/future')
def get_time_future():
    time_format = "%H:%M"
    current_time_after_hour = (datetime.datetime.now() + datetime.timedelta(hours=1)).strftime(time_format)
    return f'Точное время через час будет: {current_time_after_hour}'


# Задача 6. /get_random_word
# Создайте страницу со случайным словом из книги «Война и мир» Льва Толстого. Книга лежит в одной папке
#с практическим заданием иназывается war_and_peace.txt.
# Для получения случайного слова можно также воспользоваться модулем random.
# Для получения списка слов из текста могут понадобиться регулярные выражения.
# Если запустить программу из другой директории, то при обращении к /get_random_word возникнет ошибка FileNotFoundError.
# Это связано с тем, что заданный к файлу путь является относительным, то есть он зависит от текущей рабочей директории.
# Чтобы этого избежать, можно создать переменную BASE_DIR, которая содержит абсолютный путь к папке проекта,
# а затем уже от него задавать путь к файлу.
# Что оценивается:
# Слово отображается без знаков препинания.
# При запуске программы из другой директории и наличии файла war_and_peace.txt не выводится ошибка.
# Получение списка слов вынесено в отдельную функцию.
# При обращении к странице файл не открывается заново.

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
BOOK_FILE = os.path.join(BASE_DIR, 'war_and_peace.txt')

def war_and_peace():
    with open(BOOK_FILE, 'r') as book:
        data = book.read()
    words_list = re.findall(r'\b\w+\b', data)
    return words_list


@app.route('/get_random_word')
def get_random_word():
    return random.choice(war_and_peace())




# Задача 7. /counter
# Создайте страницу с числом, показывающим, сколько раз открывалась данная страница.
# Реализовать данный функционал можно, например, с помощью глобальной переменной.
# Из декорируемой функции возвращается строка, а не число.
# При обновлении страницы счётчик должен увеличиваться.

count = 0

@app.route('/counter')
def counter_visit():
    global count
    count += 1
    return f'Данная страница вызывалась {str(count)} раз.'

# ==================================the end====================================

if __name__ == '__main__':
    app.run(debug=True)




